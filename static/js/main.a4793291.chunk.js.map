{"version":3,"sources":["components/DrumPad.js","components/DrumBoard.js","components/Display.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","handlePlay","_this$props","_this","props","sound","updateDisplay","document","getElementById","keyTrigger","play","id","handleKeyPress","e","keyCode","addEventListener","this","removeEventListener","_this$props$sound","url","react_default","a","createElement","Fragment","className","onClick","src","Component","DrumBoard","soundFX","map","DrumPad_DrumPad","key","Display","displayText","defaultProps","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","state","soundsList","_this$state","Display_Display","DrumBoard_DrumBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4793291.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class DrumPad extends Component {\r\n\tcomponentDidMount() {\r\n\t\tdocument.addEventListener(\"keydown\", this.handleKeyPress);\r\n\t}\r\n\tcomponentWillUnmount() {\r\n\t\tdocument.removeEventListener(\"keydown\", this.handleKeyPress);\r\n\t}\r\n\r\n\thandlePlay = () => {\r\n\t\tconst { sound, updateDisplay } = this.props;\r\n\t\tconst audio = document.getElementById(sound.keyTrigger);\r\n\t\taudio.play();\r\n\t\tupdateDisplay(sound.id);\r\n\t};\r\n\r\n\thandleKeyPress = e => {\r\n\t\tconst { keyCode } = this.props.sound;\r\n\t\tif (e.keyCode === keyCode) {\r\n\t\t\tthis.handlePlay();\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { url, keyTrigger, id } = this.props.sound;\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<button className=\"drum-pad\" id={id} onClick={this.handlePlay}>\r\n\t\t\t\t\t<audio src={url} id={keyTrigger} className=\"clip\" />\r\n\t\t\t\t\t{keyTrigger}\r\n\t\t\t\t</button>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nDrumPad.propTypes = {\r\n\tsound: PropTypes.object.isRequired,\r\n\tupdateDisplay: PropTypes.func.isRequired\r\n};\r\n","import React, { Component } from \"react\";\r\nimport DrumPad from \"./DrumPad\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class DrumBoard extends Component {\r\n\trender() {\r\n\t\tconst { soundFX, updateDisplay } = this.props;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{soundFX.map(sound => (\r\n\t\t\t\t\t<DrumPad key={sound.id} updateDisplay={updateDisplay} sound={sound} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nDrumBoard.propTypes = {\r\n\tsoundFX: PropTypes.array.isRequired,\r\n\tupdateDisplay: PropTypes.func.isRequired\r\n};\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class Display extends Component {\r\n\trender() {\r\n\t\tconst { displayText } = this.props;\r\n\t\treturn (\r\n\t\t\t<div id=\"display\">\r\n\t\t\t\t<h3>{displayText}</h3>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nDisplay.propTypes = {\r\n\tdisplayText: PropTypes.string\r\n};\r\n\r\nDisplay.defaultProps = {\r\n\tdisplayText: \"\"\r\n};\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport DrumBoard from \"./components/DrumBoard\";\nimport Display from \"./components/Display\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsoundFX: soundsList,\n\t\t\tdisplayText: \"\"\n\t\t};\n\t}\n\n\tupdateDisplay = id => {\n\t\tthis.setState({ displayText: id });\n\t};\n\n\trender() {\n\t\tconst { soundFX, displayText } = this.state;\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<div id=\"drum-machine\" className=\"mx-auto\">\n\t\t\t\t\t\t<Display displayText={displayText} />\n\t\t\t\t\t\t<DrumBoard updateDisplay={this.updateDisplay} soundFX={soundFX} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst soundsList = [\n\t{\n\t\tkeyCode: 81,\n\t\tkeyTrigger: \"Q\",\n\t\tid: \"Heater-1\",\n\t\turl: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"\n\t},\n\t{\n\t\tkeyCode: 87,\n\t\tkeyTrigger: \"W\",\n\t\tid: \"Heater-2\",\n\t\turl: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\n\t},\n\t{\n\t\tkeyCode: 69,\n\t\tkeyTrigger: \"E\",\n\t\tid: \"Heater-3\",\n\t\turl: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"\n\t},\n\t{\n\t\tkeyCode: 65,\n\t\tkeyTrigger: \"A\",\n\t\tid: \"Heater-4\",\n\t\turl: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"\n\t},\n\t{\n\t\tkeyCode: 83,\n\t\tkeyTrigger: \"S\",\n\t\tid: \"Clap\",\n\t\turl: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\n\t},\n\t{\n\t\tkeyCode: 68,\n\t\tkeyTrigger: \"D\",\n\t\tid: \"Open-HH\",\n\t\turl: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"\n\t},\n\t{\n\t\tkeyCode: 90,\n\t\tkeyTrigger: \"Z\",\n\t\tid: \"Kick-n'-Hat\",\n\t\turl: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\n\t},\n\t{\n\t\tkeyCode: 88,\n\t\tkeyTrigger: \"X\",\n\t\tid: \"Kick\",\n\t\turl: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\n\t},\n\t{\n\t\tkeyCode: 67,\n\t\tkeyTrigger: \"C\",\n\t\tid: \"Closed-HH\",\n\t\turl: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"\n\t}\n];\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}